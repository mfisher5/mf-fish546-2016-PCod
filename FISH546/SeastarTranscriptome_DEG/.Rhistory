vec <- c(rep(1, times = 3), rep(2, times = 3), rep(3, times = 3))
vec
y <- c(3,2,15,-1,22,1,9,17,5)
y[1]; y[-1]
y[1]; y[9]
ylen <- length(y)
y[ylen]
ymean <- mean(y)
which(y > ymean)
ymean
avg <- mean(y)
which(y > avg)
y > avg
which(y>avg)
pos_greater <- c(which(y>avg))
y[pos_greater]
all(y >0)
any(y == avg)
ymed <- median(y)
any(y == ymed)
which(y == ymed)
y[9]
day <- c("Sun", "Mon","Tues","Wed","Thurs","Fri","Sat")
rain <- c("Yes","Yes","Yes","Yes","Yes","Yes","No")
snow <- c("No", "No", "No", "Yes", "No", "No", "No")
rainy_days <- day[rain=="Yes"]; rainy_days
umbrella <- day[rain=="Yes" & snow=="Yes"]
umbrella
nislands <- length(islands)
years <- seq(from=2015, length=nislands)
island.data <- data.frame(years, islands)
island.data
head(island.data)
str(island.data)
island.data <- data.frame(years=years, area = islands)
head(island.data, n=4)
tag <- c(2, 3, 5, 7, 8, 9, 15, 21, 23, 26)
weight <- c(14.8, 21, 19.7, 23.2, 16, 16.1, 20,
29.3, 17.8, 21.2)
"fair", "good", "good", "fair", "fair", "poor")
condition <- c("good", "fair", "fair", "poor",
"fair", "good", "good", "fair", "fair", "poor")
fishData <- data.frame(tag = tag_num, weight = weight, condition = condit)
fishData <- data.frame(tag_num = tag, weight = weight, condit = condition)
head(fishData, n = 5)
names(fishData) = c(tag, weight, condition)
names(fishData) = c("tag", "weight", "condition")
head(fishData, n=5)
fishData$weight
fishData[,2]
fishData[,-1]
new.fishData <- fishData[-2]
new.fishData
fishData[1:4,]
head(fishData, n = 4)
weather <- data.frame(day,rain, snow)
head(weather, n = 5)
weather
umbrella_weather <- umbrella[,rain=="Yes" & snow=="Yes"]
umbrella_weather <- umbrella[,umbrella$rain=="Yes" & umbrella$snow=="Yes"]
umbrella_weather <- umbrella[,weather$rain=="Yes" & weather$snow=="Yes"]
umbrella_weather <- umbrella[weather$rain=="Yes" & weather$snow=="Yes",]
umbrella_weather <- weather[weather$rain=="Yes" & weather$snow=="Yes",]
umbrella_weather
umbrella_weather <- weather[,weather$rain=="Yes" & weather$snow=="Yes"]
umbrella_weather <- weather[weather$rain=="Yes" & weather$snow=="Yes",]
patients <- data.frame(
id = c(31, 62, 50, 99, 53, 75, 54, 58, 4, 74),
age = c(12, 18, 20, 17, 14, 8, 12, 24, 24, 21),
sex = c("M", "F", "F", "M", "F", "M", "M", "F",
"F", "M") )
pos = which(age > 20); age[pos]
pos = which(patients$age > 20); patients$age[pos]
pos = which(patients$age > 20); patients[pos,]
patients[patients$sex == "F",]
patients$age[7] <- 21
patients$age
patients[sex == "F",]
sum(patients$age > 20)
sum(patients$age > 20 & patients$sex == "M")
patients
patients[-10,]
patients <- patients[-10,]
patients
?rbind
all_patients <- rbind(patients, new_patients)
new_patients <- data.frame(sex = c("M","F"), age = c("23","23"), id = c("50","55"))
all_patients <- rbind(patients, new_patients); all_patients
humidity <- c(63.33, NA, 64.63, 68.38, NA, 79.1, 77.46)
mean(humidity) #should return an error
mean(humidity, na.rm = TRUE) #should return a value
na.omit(humidity)
na.pass(humidity)
?na.pass()
na.fail(humidity) #returns the object only if it doesn't contain NA
humidity <- c(63.33, NA, 64.63, 68.38, NA, 79.1, 77.46)
x <- matrix(data = 1:6, nrow=3, ncol=2, byrow=FALSE)
x
nislands <- length(islands)
years <- seq(2015, length.out=nislands)
isl.mat <- matrix(c(years, islands), ncol = 2, nrow = nislands)
head(islmat, n=2)
source('~/.active-rstudio-document', echo=TRUE)
isl.mat <- cbind (years, islands)
isl.mat <- rbind (years, islands) #row headers = years and islands
head(isl.mat, n=3)
isl.col.mat <- cbind (years, islands) #column headers = years and islands
isl.row.mat <- rbind (years, islands) #row headers = years and islands
t(isl.row.mat)
compare.dimensions <- matrix(c(num_cols <- c(ncol(isl.col.mat),ncol(isl.row.mat)). num_rows <- c(nrow(isl.col.mat),nrow(isl.row.mat))))
num_cols <- c(ncol(isl.col.mat),ncol(isl.row.mat))
num_rows <- c(nrow(isl.col.mat),nrow(isl.row.mat))
compare.dim.mat <- rbind(num_cols,num_rows)
compare.dim.mat
compare.dim.mat <- rbind(num_cols,num_rows, colnames = c("cbind", "rbind"))
compare.dim.mat
compare.dim.mat <- rbind(num_cols <- c(ncol(isl.col.mat),ncol(isl.row.mat)),num_rows<-c(nrow(isl.col.mat),nrow(isl.row.mat)))
compare.dim.mat
compare.dim.mat <- rbind(num_cols = c(ncol(isl.col.mat),ncol(isl.row.mat)),num_rows =c(nrow(isl.col.mat),nrow(isl.row.mat)))
compare.dim.mat
isl.array <- array(data = c(years, islands), dim = c(nislands, 2))
head(isl.array, n = 4)
"F", "M") )
sex = c("M", "F", "F", "M", "F", "M", "M", "F", "F", "M") )
patients <- data.frame(id = c(31, 62, 50, 99, 53, 75, 54, 58, 4, 74),  age = c(12, 18, 20, 17, 14, 8, 12, 24, 24, 21), sex = c("M", "F", "F", "M", "F", "M", "M", "F", "F", "M") )
pat.list <- as.list(patients)
pat.list
pat.list[[1]] #is the same as pat.list$id
pat.list[[1]][1] #1st object in list 1
pat.list[[1]][1] #1st object in list 1. is the same as pat.list$id[1]
pat.list$is[1]
pat.list$id[1]
pat.list$id <- matrix(pat.list$id, ncol=2)
pat.list$id
pat.list
pat.list[[1]][1,1] #accesses data point at position 1,1 in the first matrix
pat.list[[1]][1,]
zone <- c("demersal", "pelagic", "reef","demersal")
type(zone)
typeof(zone)
zone
is.factor(zone)
is.list(zone)
zone <- list("demersal", "pelagic", "reef","demersal")
typeof(zone)
zone[1]
zone <- c("demersal", "pelagic", "reef","demersal")
zone[1]
zone.fac <- is.factor(zone)
typeof(zone)
typeof(zone.fac)
is.factor(zone)
is.factor(zone.fac)
zone <- c("demersal", "pelagic", "reef","demersal")
zone.fac <- factor(zone)
typeof(zone.fac)
is.factor(zone.fac)
zone <- c(1, 1, 1, 2, 2, 2, 1, 2, 2, 1)
zone.fac <- factor(zone, labels = c("demersal","pelagic"))
zone.fac
levels(zone.fac) #finds levels of factor
Amat <- matrix(data = 1:4, nrow = 2, ncol = 2, byrow = TRUE)
Amat
Bmat <- matrix(data = 5:11, nrow = 2, ncol = 3, byrow = TRUE)
Bmat <- matrix(data = 5:10, nrow = 2, ncol = 3, byrow = TRUE)
Bmat
Cmat <- cbind(Amat,Bmat)
Cmat
Dmat <- rbind(Amat,Bmat)
t(Bmat); Bmat
Bmat <- t(Bmat); Bmat
Dmat <- rbind(Amat, Bmat)
Dmat
sex <- c(1,1,2,1,2,2,2,1,1,1)
sex.fac <- factor(sex, labels = c("female", "male"))
sex.fac
rm(sex.fac)
Xfactor <- factor(sex, labels = c("female", "male"))
data <- list(Amat, Bmat, Xfactor)
data
data[[1]][1,]
data$Amat[1]
data$Amat
typeof(data)
data[[2]][1,1] <- NA
data[[2]][1,1]
data
?matrix
e3data <- c("1/4/2015","1/5/2015","1/26/2015","2/2/2015", "2/25/2015","2/26/2015","3/31/2015","4/10/2015", "4/27/2015","4/16/2015","4/9/2015","5/4/2015", "5/8/2015","5/25/2015","5/26/2015","5/27/2015","5/31/2015","6/25/2015","7/21/2015","8/28/2015","8/1/2015","8/31/2015","8/16/2015","9/22/2015""9/2/2015","9/20/2015","9/25/2015","9/6/2015","10/16/2015","11/2/2015","11/2/2015","11/11/2015","12/10/2015","12/6/2015","12/19/2015")
e3data <- c("1/4/2015","1/5/2015","1/26/2015","2/2/2015","2/25/2015","2/26/2015","3/31/2015","4/10/2015", "4/27/2015","4/16/2015","4/9/2015","5/4/2015","5/8/2015","5/25/2015","5/26/2015","5/27/2015","5/31/2015","6/25/2015","7/21/2015","8/28/2015","8/1/2015","8/31/2015","8/16/2015","9/22/2015","9/2/2015","9/20/2015","9/25/2015","9/6/2015","10/16/2015","11/2/2015","11/2/2015","11/11/2015","12/10/2015","12/6/2015","12/19/2015")
plants <- PlantGrowth
unique(plants)
is.numeric(plants)
ages <- c(47, 14, 24, 33, 74)
cut(ages, breaks = c(0, 18, 65, Inf), labels = c("Kid","Adult","Senior"))
letters
month.name
month
?sample()
temp <- sample(1:100, size = 10000000, replace = T)
system.time(unique(temp))
system.time(temp[!duplicated(temp)])
?merge()
intersect(1:10, 7:20) #finds common elements in vectors
match(1:10, c(1,3,5,9)) #matches positions of common elements in vectors
x <- c(1:10)
y <- c(1,3,5,9)
?match()
?match(x,y,nomatch = "FALSE")
match(x,y,nomatch = "FALSE")
"%in%" <- match(x,y,nomatch = 0)
%in%
matches <- "%in%" <- match(x,y,nomatch = 0)
matches
x <- 1:100000000
y <- sample(x, size=1000000)
matches <- match(x,y,nomatch = 0)
x <- c(1:10)
y <- c(1,3,5,9)
matches <- as.logical(match(x,y,nomatch = 0))
matches
x <- 1:100000000
y <- sample(x, size=1000000)
system.time(matches <- as.logical(match(x,y,nomatch = 0)))
as.Date('September 22, 1983', format = '%m/%d/%Y')
as.Date('September 22, 1983', format = '%B %d %Y')
as.Date('September 22, 1983', format = '%B %d, %Y')
as.Date('September 22, 1983', format = '%M %d, %Y')
as.Date('September 22, 1983', format = '%B %d, %Y')
weekdays(as.Date("013/10/15"))
quarter(as.Date("013/10/15"))
quarters(as.Date("013/10/15"))
origin=as.Date("2013/01/01"))
julian(as.Date("2013/10/15"), origin=as.Date("2013/01/01"))
as.POSIXlt("1983-9-22 23:20:05")
as.POSIXct("1983-9-22 23:20:05")
mean(c(as.Date("2013/10/15"),as.Date("2010/06/14")))
difftime(c(as.Date("2013/10/15"),as.Date("2010/06/14")))
difftime(as.Date("2013/10/15"),as.Date("2010/06/14"))
everyday <- seq(from=as.Date("2013-01-01"), to=as.Date("2013-12-31"), by="day")
head(everyday)
month <- months(everyday)
month <- factor(month, levels=unique(month), ordered = TRUE)
table(month)
mBday <- as.Date("05/05/1993", format = "%m/%d/%Y")
mBday
aBday <- as.Date("04/16/1995", format = "%m/%d/%Y")
weekdays(mBday)
weekdays(aBday)
Bdays <- c(mBday, aBday)
weekdays(Bdays)
months(Bdays)
difftime(mBday, aBday)
difftime(aBday, mBday)
library("MASS", lib.loc="C:/Program Files/R/R-3.3.0/library")
rquire("MASS")
require("MASS")
bdays <- c("1/4/2015","1/5/2015","1/26/2015","2/2/2015","2/25/2015","2/26/2015","3/31/2015","4/10/2015", "4/27/2015","4/16/2015","4/9/2015","5/4/2015","5/8/2015","5/25/2015","5/26/2015","5/27/2015","5/31/2015","6/25/2015","7/21/2015","8/28/2015","8/1/2015","8/31/2015","8/16/2015","9/22/2015","9/2/2015","9/20/2015","9/25/2015","9/6/2015","10/16/2015","11/2/2015","11/2/2015","11/11/2015","12/10/2015","12/6/2015","12/19/2015")
bdays
bdays.dates <- as.Date(bdays, format = "%m/%d/%Y")
source('~/.active-rstudio-document', echo=TRUE)
bdays.dates[duplicated(bdays.dates)]
order(bdays.dates)
bdays.dates
?date
tapply(X = bdays.dates, FUN = difftime)
apply(X = bdays.dates, MARGIN = 1, FUN = difftime)
dim(bdays.dates)
length(bdays.dates)
letters
names <- rep(letters, length.out = 35)
names
bdays.df <- cbind(names, bdays.dates)
bdays.df
bdays.dates
bdays.matrix <- cbind(names, as.Date(bdays.dates))
bdays.matrix
bdays.dates
bdays.matrix <- cbind(bdays.dates,bdays.dates)
bdays.matrix
bdays.matrix <- cbind(bdays,bdays)
bdays.matrix
bdays.matrix <- as.Date(bdays.matrix, format = "%m/%d/%Y")
bdays.matrix
bdays.matrix <- cbind(as.Date(bdays, format = "%m/%d/%Y"),as.Date(bdays, format = "%m/%d/%Y"))
bdays.matrix
bdays.matrix[1,1]
bdays.df <- data.frame(bdays.dates, bdays.dates)
bdays.df
apply(X = bdays.df, INDEX = bdays.dates.1, FUN = difftime)
tapply(X = bdays.df, INDEX = bdays.dates.1, FUN = difftime)
tapply(X = bdays.df, FUN = difftime)
names <- rep(letters, length.out = 35)
names <- as.factor(names)
names
bdays.df <- data.frame(names, bdays.dates)
bdays.df
tapply(X = bdays.df, INDEX = names, FUN = difftime)
length(bdays.df$names)
length(bdays.df$bdays.dates)
bdays.matrix <- matrix(bdays.dates)
source('~/.active-rstudio-document', echo=TRUE)
bdays.dates <- as.factor(bdays.dates)
bdays <- c("1/4/2015","1/5/2015","1/26/2015","2/2/2015","2/25/2015","2/26/2015","3/31/2015","4/10/2015", "4/27/2015","4/16/2015","4/9/2015","5/4/2015","5/8/2015","5/25/2015","5/26/2015","5/27/2015","5/31/2015","6/25/2015","7/21/2015","8/28/2015","8/1/2015","8/31/2015","8/16/2015","9/22/2015","9/2/2015","9/20/2015","9/25/2015","9/6/2015","10/16/2015","11/2/2015","11/2/2015","11/11/2015","12/10/2015","12/6/2015","12/19/2015")
bdays.dates <- as.Date(bdays, format = "%m/%d/%Y")
bdays.dates.fac <- as.factor(bdays.dates)
apply(X = bdays.dates, INDEX = bdays.dates.fac, FUN = difftime)
source('~/.active-rstudio-document', echo=TRUE)
bdays.dates.mat <- matrix(bdays.dates)
apply(X = bdays.dates.mat, INDEX = bdays.dates.fac, FUN = difftime)
tapply(X = bdays.dates.mat, INDEX = bdays.dates.fac, FUN = difftime)
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
setwd("D:/Pacific cod/DataAnalysis/mf-fish546-2016/TranscriptomeBLAST")
data <- read.table("./data/Phel_countdata.txt", header = T, sep = "\t")
data <- read.table("./data/Phel_countdata.txt", header = T, sep = "\t")
rownames(data) <- data$Feature
data <- data[,-1]
deseq2.colData <- data.frame(condition=factor(c(rep("Treated", 3), rep("Control", 3))),
type=factor(rep("single-read", 6)))
rownames(deseq2.colData) <- colnames(data)
deseq2.dds <- DESeqDataSetFromMatrix(countData = data,
colData = deseq2.colData,
design = ~ condition)
deseq2.dds <- DESeq(deseq2.dds)
deseq2.res <- results(deseq2.dds)
deseq2.res <- deseq2.res[order(rownames(deseq2.res)), ]
head(deseq2.res)
dim(deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj <= 0.05, ])
length(data)
dim(data)
design = ~ condition)
deseq2.colData <- data.frame(condition=factor(c(rep("Treated", 3), rep("Control", 3))), type=factor(rep("single-read", 6)))
rownames(deseq2.colData) <- colnames(data)
deseq2.dds <- DESeqDataSetFromMatrix(countData = data, colData = deseq2.colData, design = ~ condition)
deseq2.dds <- DESeq(deseq2.dds)
deseq2.res <- results(deseq2.dds)
deseq2.res <- deseq2.res[order(rownames(deseq2.res)), ]
head(deseq2.res)
dim(deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj <= 0.05, ])
tmp <- deseq2.res
#main plot
plot(tmp$baseMean, tmp$log2FoldChange, pch=20, cex=0.45, ylim=c(-3, 3), log="x", col="darkgray",
main="DEG Virus Exposure  (pval <= 0.05)",
xlab="mean of normalized counts",
ylab="Log2 Fold Change")
#plotting significant points a different color
tmp.sig <- deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj <= 0.05, ]
points(tmp.sig$baseMean, tmp.sig$log2FoldChange, pch=20, cex=0.45, col="lightskyblue3")
# 2 FC lines
abline(h=c(-1,1), col="orangered")
tmp <- deseq2.res
#main plot
plot(tmp$baseMean, tmp$log2FoldChange, pch=20, cex=0.45, ylim=c(-3, 3), log="x", col="darkgray",
main="DEG Virus Exposure  (pval <= 0.05)",
xlab="mean of normalized counts",
ylab="Log2 Fold Change")
#plotting significant points a different color
tmp.sig <- deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj <= 0.05, ]
points(tmp.sig$baseMean, tmp.sig$log2FoldChange, pch=20, cex=0.45, col="skyblue")
# 2 FC lines
abline(h=c(-1,1), col="orangered")
tmp <- deseq2.res
#main plot
plot(tmp$baseMean, tmp$log2FoldChange, pch=19, cex=0.45, ylim=c(-3, 3), log="x", col="darkgray",
main="DEG Virus Exposure  (pval <= 0.05)",
xlab="mean of normalized counts",
ylab="Log2 Fold Change")
#plotting significant points a different color
tmp.sig <- deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj <= 0.05, ]
points(tmp.sig$baseMean, tmp.sig$log2FoldChange, pch=20, cex=0.45, col="skyblue")
# 2 FC lines
abline(h=c(-1,1), col="orangered")
tmp <- deseq2.res
#main plot
plot(tmp$baseMean, tmp$log2FoldChange, pch=19, cex=1.0, ylim=c(-3, 3), log="x", col="darkgray",
main="DEG Virus Exposure  (pval <= 0.05)",
xlab="mean of normalized counts",
ylab="Log2 Fold Change")
#plotting significant points a different color
tmp.sig <- deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj <= 0.05, ]
points(tmp.sig$baseMean, tmp.sig$log2FoldChange, pch=20, cex=0.45, col="skyblue")
# 2 FC lines
abline(h=c(-1,1), col="orangered")
tmp <- deseq2.res
#main plot
plot(tmp$baseMean, tmp$log2FoldChange, pch=19, cex=0.75, ylim=c(-3, 3), log="x", col="darkgray",
main="DEG Virus Exposure  (pval <= 0.05)",
xlab="mean of normalized counts",
ylab="Log2 Fold Change")
#plotting significant points a different color
tmp.sig <- deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj <= 0.05, ]
points(tmp.sig$baseMean, tmp.sig$log2FoldChange, pch=20, cex=0.75, col="deepskyblue")
# 2 FC lines
abline(h=c(-1,1), col="orangered")
write.table(tmp.sig, "./wd/Phel_DEGlist.tab", row.names = T)
write.table(tmp.sig, "./data/Phel_DEGlist.tab", row.names = T)
